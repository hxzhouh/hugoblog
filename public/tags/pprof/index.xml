<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>pprof on 九又四分之三站台</title>
    <link>https://blog.hxzhouh.com/tags/pprof/</link>
    <description>Recent content in pprof on 九又四分之三站台</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <lastBuildDate>Fri, 30 Sep 2022 15:14:57 +0800</lastBuildDate><atom:link href="https://blog.hxzhouh.com/tags/pprof/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Golang 大杀器之性能剖析 PProf</title>
      <link>https://blog.hxzhouh.com/post/Golang-%E5%A4%A7%E6%9D%80%E5%99%A8%E4%B9%8B%E6%80%A7%E8%83%BD%E5%89%96%E6%9E%90-PProf/</link>
      <pubDate>Fri, 30 Sep 2022 15:14:57 +0800</pubDate>
      
      <guid>https://blog.hxzhouh.com/post/Golang-%E5%A4%A7%E6%9D%80%E5%99%A8%E4%B9%8B%E6%80%A7%E8%83%BD%E5%89%96%E6%9E%90-PProf/</guid>
      <description>Golang 大杀器之性能剖析 PProf 前言 写了几吨代码，实现了几百个接口。功能测试也通过了，终于成功的部署上线了 结果，性能不佳，什么鬼？😭 想做性能分析 PProf 想要进行性能优化，首先瞩目在 Go 自身提供的工具链来作为分析依据，本文将带你学习、使用 Go 后花园，涉及如下： runtime/pprof：采集程序（非 Se</description>
    </item>
    
  </channel>
</rss>
